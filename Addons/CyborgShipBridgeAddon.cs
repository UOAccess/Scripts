/////////////////////////////////////////////////
//
// Automatically generated by the
// AddonGenerator script by Arya
//
/////////////////////////////////////////////////
using System;
using Server;
using Server.Items;

namespace Server.Items
{
	public class CyborgShipBridgeAddon : BaseAddon
	{
		public override BaseAddonDeed Deed
		{
			get
			{
				return new CyborgShipBridgeAddonDeed();
			}
		}

		[ Constructable ]
		public CyborgShipBridgeAddon()
		{
			AddonComponent ac;
			ac = new AddonComponent( 1801 );
			AddComponent( ac, -2, 2, 0 );
			ac = new AddonComponent( 1801 );
			AddComponent( ac, -2, 1, 0 );
			ac = new AddonComponent( 1801 );
			AddComponent( ac, -1, 1, 0 );
			ac = new AddonComponent( 1801 );
			AddComponent( ac, -2, 2, 5 );
			ac = new AddonComponent( 1801 );
			AddComponent( ac, -2, 1, 5 );
			ac = new AddonComponent( 1801 );
			AddComponent( ac, -1, 1, 5 );
			ac = new AddonComponent( 3630 );
			ac.Light = LightType.Circle150;
			ac.Hue = 2604;
			AddComponent( ac, -2, 1, 10 );
			ac = new AddonComponent( 7961 );
			ac.Hue = 2604;
			AddComponent( ac, -1, 1, 10 );
			ac = new AddonComponent( 14270 );
			ac.Hue = 2604;
			AddComponent( ac, -1, 2, 10 );
			ac = new AddonComponent( 4241 );
			ac.Hue = 2604;
			AddComponent( ac, -2, 3, 1 );
			ac = new AddonComponent( 4242 );
			ac.Hue = 2604;
			AddComponent( ac, -2, 3, 6 );
			ac = new AddonComponent( 8515 );
			AddComponent( ac, -2, 2, 10 );
			ac = new AddonComponent( 14363 );
			ac.Hue = 2590;
			AddComponent( ac, -2, 2, 12 );
			ac = new AddonComponent( 1801 );
			AddComponent( ac, 0, 1, 0 );
			ac = new AddonComponent( 1801 );
			AddComponent( ac, 2, 1, 0 );
			ac = new AddonComponent( 1801 );
			AddComponent( ac, 0, 1, 5 );
			ac = new AddonComponent( 1801 );
			AddComponent( ac, 1, 1, 5 );
			ac = new AddonComponent( 1801 );
			AddComponent( ac, 1, 1, 0 );
			ac = new AddonComponent( 1801 );
			AddComponent( ac, 2, 2, 0 );
			ac = new AddonComponent( 1801 );
			AddComponent( ac, 2, 2, 5 );
			ac = new AddonComponent( 8514 );
			AddComponent( ac, 0, 1, 10 );
			ac = new AddonComponent( 6886 );
			ac.Light = LightType.Circle225;
			AddComponent( ac, 0, 1, 12 );
			ac = new AddonComponent( 14275 );
			AddComponent( ac, 1, -2, 10 );
			ac = new AddonComponent( 14277 );
			ac.Hue = 1266;
			AddComponent( ac, 2, 3, 17 );
			ac = new AddonComponent( 3630 );
			ac.Light = LightType.Circle150;
			ac.Hue = 2604;
			AddComponent( ac, 2, 1, 10 );
			ac = new AddonComponent( 3865 );
			AddComponent( ac, 3, 3, 4 );
			ac = new AddonComponent( 3865 );
			AddComponent( ac, 3, 3, 6 );
			ac = new AddonComponent( 3865 );
			AddComponent( ac, 3, 3, 8 );
			ac = new AddonComponent( 3865 );
			AddComponent( ac, 3, 3, 10 );
			ac = new AddonComponent( 3868 );
			AddComponent( ac, 2, 3, 4 );
			ac = new AddonComponent( 3868 );
			AddComponent( ac, 2, 3, 6 );
			ac = new AddonComponent( 3868 );
			AddComponent( ac, 2, 3, 8 );
			ac = new AddonComponent( 3868 );
			AddComponent( ac, 2, 3, 10 );
			ac = new AddonComponent( 7961 );
			ac.Hue = 2604;
			AddComponent( ac, 1, 1, 10 );
			ac = new AddonComponent( 1801 );
			AddComponent( ac, 2, 1, 5 );
			ac = new AddonComponent( 14270 );
			ac.Hue = 2604;
			AddComponent( ac, 3, 2, 10 );
			ac = new AddonComponent( 8515 );
			AddComponent( ac, 2, 2, 10 );
			ac = new AddonComponent( 14266 );
			ac.Hue = 2598;
			AddComponent( ac, 3, 3, 11 );

		}

		public CyborgShipBridgeAddon( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( 0 ); // Version
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
			int version = reader.ReadInt();
		}
	}

	public class CyborgShipBridgeAddonDeed : BaseAddonDeed
	{
		public override BaseAddon Addon
		{
			get
			{
				return new CyborgShipBridgeAddon();
			}
		}

		[Constructable]
		public CyborgShipBridgeAddonDeed()
		{
			Name = "CyborgShipBridge";
		}

		public CyborgShipBridgeAddonDeed( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( 0 ); // Version
		}

		public override void	Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
			int version = reader.ReadInt();
		}
	}
}